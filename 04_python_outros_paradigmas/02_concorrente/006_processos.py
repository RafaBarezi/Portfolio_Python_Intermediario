from threading import Thread
from multiprocessing import Process, Value

# Para criar uma √°rea de mem√≥ria compartilhada e permitir que diferentes processos acessem a mesma vari√°vel, podemos utilizar a classe value do m√≥dulo multiprocessing.

def funcao_a(indice, cont):
    for i in range(100000):
        with cont.get_lock():  # O Python j√° disponibiliza essa trava nos objetos do tipo value, n√£o sendo necess√°rio criar uma vari√°vel espec√≠fica para a trava (lock). Observe como foi realizada a trava utilizando o m√©todo get_lock().
            cont.value += 1
    print("Termino processo ", indice)

if __name__ == '__main__':
    # Para permitir que a vari√°vel seja compartilhada, declaramos uma vari√°vel chamada contador utilizando o construtor da classe value, onde passamos como primeiro argumento um caractere com o tipo da vari√°vel compartilhada (‚Äòi‚Äô ü°™ inteiro) e seu valor inicial (0).
    contador = Value('i', 0)
    tarefas = []
    for indice in range(10):
        # Como n√£o temos acesso a vari√°veis globais entre os processos, precisamos passar esta para o construtor process por meio do par√¢metro args. Como a passagem de par√¢metros √© posicional, o par√¢metro √≠ndice da funcao_a recebe o valor da vari√°vel √≠ndice e o par√¢metro cont recebe uma refer√™ncia para a vari√°vel contador.
        tarefa = Process(target=funcao_a, args=(indice, contador))
        tarefas.append(tarefa)
        tarefa.start()

    print("Antes de aguardar o termino!", contador.value)

    for tarefa in tarefas:
        tarefa.join()

    print("Ap√≥s aguardar o termino!", contador.value)